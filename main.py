from aiogram import Bot, Dispatcher, executor, types
from aiogram.types  import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from tokens import TG_TOKEN, GROUP, WELCOME_MSG
from vk_logic import *

storage = MemoryStorage()

bot = Bot(token=TG_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
   
btn_open = InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç üó£', callback_data='open')
btn_close = InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å –ø–æ—Å—Ç ü§ê', callback_data='close')
btn_del = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç üëÆ‚Äç‚ôÇÔ∏è', callback_data='delete')
btn_res =  InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å –∫–æ–º–º–µ–Ω—Ç ü§ï', callback_data='restore')
btn_res_post = InlineKeyboardButton ('–í–µ—Ä–Ω—É—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç üò∞',callback_data= 'restore_post')
btn_ban = InlineKeyboardButton('–í –±–∞–Ω!‚õîÔ∏è', callback_data='ban')
btn_unban = InlineKeyboardButton('–†–∞–∑–±–∞–Ω üîë', callback_data='unban')
btn_reboot = InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É üîÑ\n–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É', callback_data='reboot')

MENU = InlineKeyboardMarkup().row(btn_open, 
btn_close).row(btn_del, 
btn_res).row(btn_res_post).row(btn_ban,
btn_unban).row(btn_reboot)

'''Authorization func. Checking if user is a member of group'''
def user_check(chat_member):
    if chat_member['status'] != 'left' and chat_member['status'] != 'kicked': 
        return True
    else:
        return False

'''FSM class for storing user's link'''
class MessageData(StatesGroup):
    link = State()
    fin = State()

'''/start command handler'''
@dp.message_handler(commands=['start'])
async def welcome_msg(message: types.Message):
    if user_check(await bot.get_chat_member(chat_id=GROUP,user_id=message.from_user.id)):
        await bot.send_message(message.from_user.id, text= WELCOME_MSG)
        await MessageData.link.set()
    else:
        await bot.send_message(message.from_user.id,text= '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')

'''Handler to avoid wrong message'''
@dp.message_handler(lambda message: not message.text.startswith('http'),state= MessageData.link)
async def process_link_invalid(message: types.Message):
    return await message.reply('–ü—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É!')

'''Link's handler'''
@dp.message_handler(Text(startswith='http'), state = MessageData.link)
async def input_link(message: types.Message, state = FSMContext):
    if user_check(await bot.get_chat_member(chat_id=GROUP,user_id=message.from_user.id)):
        async with state.proxy() as data:
            data['link'] = message.text
        await message.answer(text= '–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å? ü§ñ', reply_markup=MENU)
        await MessageData.next()
    else:
        await bot.send_message(message.from_user.id,text= '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')

'''Handler for the inline buttons'''
@dp.callback_query_handler(text=['open','close', 'delete', 'restore','restore_post',
'ban','unban','reboot'], state = MessageData.fin)
async def process_callback(call: types.CallbackQuery, state = FSMContext ): 
    if call.data == 'open':
        data = await state.get_data() 
        if vk_open(link_transform(data['link'])):
            await call.message.answer(text='–ü–æ—Å—Ç –æ—Ç–∫—Ä—ã—Ç ‚úÖ')
            await MessageData.fin.set()
        else:
            await call.message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ /start')
    if call.data == 'close':
        data = await state.get_data() 
        if vk_close(link_transform(data['link'])):
            await call.message.answer(text='–ü–æ—Å—Ç –∑–∞–∫—Ä—ã—Ç ‚úÖ')
            await MessageData.fin.set()
        else:
            await call.message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ /start')
    if call.data == 'delete':
        data = await state.get_data()
        if vk_delete(link_transform(data['link'])):
            await call.message.answer(text='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω ‚úÖ')
            await MessageData.fin.set()
        else:
            await call.message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ /start')
    if call.data == 'restore':
        data = await state.get_data()
        if vk_restore(link_transform(data['link'])):
            await call.message.answer(text='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úÖ')
            await MessageData.fin.set()
        else:
            await call.message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ /start')
    if call.data == 'restore_post':
        data = await state.get_data()
        if vk_restore_post(link_transform(data['link'])):
            await call.message.answer('–ü–æ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úÖ')
        else:
            await call.message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ /start')
    if call.data == 'ban':
        data = await state.get_data()
        if data['link'].startswith('https://vk.com/wall'):
            vk_ban(get_comment(link_transform(data['link'])))
            await call.message.answer('–ó–∞–±–∞–Ω–µ–Ω! ‚úÖ')
            await MessageData.fin.set()
        else:
            vk_ban(screen_name_to_id(data['link']))
            await call.message.answer('–ó–∞–±–∞–Ω–µ–Ω! ‚úÖ')
            await MessageData.fin.set()
    if call.data == 'unban':
        data = await state.get_data()
        if vk_unban(screen_name_to_id(data['link'])):
            await call.message.answer('–†–∞–∑–±–∞–Ω–µ–Ω! ‚úÖ')
            await MessageData.fin.set()
        else:
            await call.message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ /start')
    if call.data == 'reboot':
        await state.finish()
        await call.message.answer(text='–ù–∞–∂–º–∏—Ç–µ /start')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates = True)